'use client';

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Send, Bot, User, Lightbulb, MessageCircle, Sparkles, Clock, Mic, MicOff, Volume2, VolumeX, RotateCcw, Copy, ThumbsUp, ThumbsDown } from 'lucide-react';

interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
  isTyping?: boolean;
  rating?: 'up' | 'down' | null;
}

interface ChatSession {
  id: string;
  title: string;
  messages: Message[];
  timestamp: Date;
}

interface AccessibilitySettings {
  fontSize: 'small' | 'medium' | 'large';
  language: 'english' | 'hindi';
  highContrast: boolean;
  voiceEnabled: boolean;
  speechRate: number;
}

export default function AIChat() {
  const [settings, setSettings] = useState<AccessibilitySettings>({
    fontSize: 'medium',
    language: 'english',
    highContrast: false,
    voiceEnabled: false,
    speechRate: 0.8
  });

  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: "Namaste! I'm DLC Agent, your friendly digital learning assistant. I'm here to help you master digital tools with confidence. How can I assist you today?",
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [voiceEnabled, setVoiceEnabled] = useState(false);
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);
  const [currentSessionId, setCurrentSessionId] = useState<string>('default');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  // TypeScript: Declare SpeechRecognition type for browser compatibility
  type SpeechRecognitionType = typeof window extends { webkitSpeechRecognition: infer T }
    ? T
    : any;
  
  const recognitionRef = useRef<InstanceType<SpeechRecognitionType> | null>(null);

  const getTranslatedText = (englishText: string, hindiText: string) => {
    return settings.language === 'hindi' ? hindiText : englishText;
  };

  const suggestedQuestions = [
    getTranslatedText("How do I make a video call on WhatsApp?", "‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§ê‡§™ ‡§™‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•â‡§≤ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•Ç‡§Ç?"),
    getTranslatedText("What's the safest way to pay online?", "‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"),
    getTranslatedText("How do I find directions on Google Maps?", "‡§ó‡•Ç‡§ó‡§≤ ‡§Æ‡•à‡§™‡•ç‡§∏ ‡§™‡§∞ ‡§¶‡§ø‡§∂‡§æ ‡§ï‡•à‡§∏‡•á ‡§ñ‡•ã‡§ú‡•Ç‡§Ç?"),
    getTranslatedText("How can I share photos with my family?", "‡§Æ‡•à‡§Ç ‡§Ö‡§™‡§®‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§´‡•ã‡§ü‡•ã ‡§ï‡•à‡§∏‡•á ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?"),
    getTranslatedText("How do I create a strong password?", "‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•à‡§∏‡•á ‡§¨‡§®‡§æ‡§ä‡§Ç?"),
    getTranslatedText("What should I do if I receive a suspicious message?", "‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Æ‡§ø‡§≤‡§®‡•á ‡§™‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡•Ç‡§Ç?"),
    getTranslatedText("How do I download apps safely?", "‡§ê‡§™‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡•à‡§∏‡•á ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•Ç‡§Ç?"),
    getTranslatedText("How can I backup my photos?", "‡§Ö‡§™‡§®‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§ï‡§æ ‡§¨‡•à‡§ï‡§Ö‡§™ ‡§ï‡•à‡§∏‡•á ‡§≤‡•Ç‡§Ç?"),
    getTranslatedText("What is UPI and how do I use it?", "UPI ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§á‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•Ç‡§Ç?"),
    getTranslatedText("How do I block unwanted calls?", "‡§Ö‡§µ‡§æ‡§Ç‡§õ‡§ø‡§§ ‡§ï‡•â‡§≤ ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§∞‡•Ç‡§Ç?")
  ];

  const predefinedResponses: { [key: string]: string } = {
    "video call": getTranslatedText(
      "To make a video call on WhatsApp:\n\n1Ô∏è‚É£ Open WhatsApp and find your contact\n2Ô∏è‚É£ Tap the video camera icon at the top\n3Ô∏è‚É£ Wait for them to answer\n4Ô∏è‚É£ Enjoy your conversation!\n\nüí° Tip: Make sure you have good internet connection for the best experience!\n\nüîí Safety: Only call people you know and trust.",
      "‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§ê‡§™ ‡§™‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n\n1Ô∏è‚É£ ‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§ê‡§™ ‡§ñ‡•ã‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ñ‡•ã‡§ú‡•á‡§Ç\n2Ô∏è‚É£ ‡§ä‡§™‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§Ü‡§á‡§ï‡§® ‡§™‡§∞ ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç\n3Ô∏è‚É£ ‡§â‡§®‡§ï‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç\n4Ô∏è‚É£ ‡§Ö‡§™‡§®‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§æ ‡§Ü‡§®‡§Ç‡§¶ ‡§≤‡•á‡§Ç!\n\nüí° ‡§ü‡§ø‡§™: ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç!\n\nüîí ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ: ‡§ï‡•á‡§µ‡§≤ ‡§â‡§® ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç ‡§Ü‡§™ ‡§ú‡§æ‡§®‡§§‡•á ‡§î‡§∞ ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§"
    ),
    "pay online": getTranslatedText(
      "For safe online payments:\n\nüîê Use only trusted apps like Paytm, PhonePe, or your bank's official app\nüîê Never share your PIN or OTP with anyone\nüîê Always double-check the amount before confirming\nüîê Keep your phone locked with a password\nüîê Only shop on websites that start with 'https://'\n\n‚úÖ Remember: Banks will never ask for your PIN over phone or SMS!\n\nüö® If something feels wrong, don't proceed with the payment.",
      "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è:\n\nüîê ‡§ï‡•á‡§µ‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§ê‡§™‡•ç‡§∏ ‡§ú‡•à‡§∏‡•á Paytm, PhonePe, ‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§¨‡•à‡§Ç‡§ï ‡§ï‡•á ‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§ê‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\nüîê ‡§Ö‡§™‡§®‡§æ PIN ‡§Ø‡§æ OTP ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§® ‡§ï‡§∞‡•á‡§Ç\nüîê ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•Ä ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç\nüîê ‡§Ö‡§™‡§®‡•á ‡§´‡•ã‡§® ‡§ï‡•ã ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∏‡•á ‡§≤‡•â‡§ï ‡§∞‡§ñ‡•á‡§Ç\nüîê ‡§ï‡•á‡§µ‡§≤ ‡§â‡§® ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü‡•ã‡§Ç ‡§™‡§∞ ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã 'https://' ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç\n\n‚úÖ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç: ‡§¨‡•à‡§Ç‡§ï ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§´‡•ã‡§® ‡§Ø‡§æ SMS ‡§™‡§∞ ‡§Ü‡§™‡§ï‡§æ PIN ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç‡§ó‡•á!\n\nüö® ‡§Ö‡§ó‡§∞ ‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§≤‡§ó‡•á, ‡§§‡•ã ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§"
    ),
    // Add more translated responses...
  };

  // Listen for accessibility settings changes
  useEffect(() => {
    const handleSettingsChange = (event: CustomEvent) => {
      setSettings(event.detail);
    };

    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
        console.error('Error loading accessibility settings:', error);
      }
    }

    window.addEventListener('accessibilitySettingsChanged', handleSettingsChange as EventListener);
    return () => {
      window.removeEventListener('accessibilitySettingsChanged', handleSettingsChange as EventListener);
    };
  }, []);

  // Initialize speech recognition
  useEffect(() => {
    if (typeof window !== 'undefined' && 'webkitSpeechRecognition' in window) {
      const SpeechRecognitionConstructor =
        (window as any).SpeechRecognition ||
        (window as any).webkitSpeechRecognition;
      if (!SpeechRecognitionConstructor) return;

      const recognition = new SpeechRecognitionConstructor();
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.lang = settings.language === 'hindi' ? 'hi-IN' : 'en-US';

      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setInputText(transcript);
        setIsListening(false);
      };

      recognition.onend = () => {
        setIsListening(false);
      };

      recognition.onerror = () => {
        setIsListening(false);
      };

      recognitionRef.current = recognition;
    }
  }, [settings.language]);

  // Load chat sessions from localStorage
  useEffect(() => {
    const savedSessions = localStorage.getItem('chat-sessions');
    if (savedSessions) {
      setChatSessions(JSON.parse(savedSessions));
    }
  }, []);

  // Save chat sessions to localStorage
  useEffect(() => {
    if (chatSessions.length > 0) {
      localStorage.setItem('chat-sessions', JSON.stringify(chatSessions));
    }
  }, [chatSessions]);

  const speak = (text: string) => {
    if ('speechSynthesis' in window && voiceEnabled) {
      window.speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.8;
      utterance.pitch = 1;
      utterance.lang = settings.language === 'hindi' ? 'hi-IN' : 'en-US';
      window.speechSynthesis.speak(utterance);
    }
  };

  const getResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    for (const [key, response] of Object.entries(predefinedResponses)) {
      if (lowerMessage.includes(key)) {
        return response;
      }
    }
    
    return getTranslatedText(
      "That's a wonderful question! I'm here to help you learn digital skills safely and easily. \n\nüí° You can ask me about:\n‚Ä¢ WhatsApp, YouTube, Facebook, Gmail\n‚Ä¢ Online payments and UPI\n‚Ä¢ Google Maps and navigation\n‚Ä¢ Photo sharing and backup\n‚Ä¢ Online safety and security\n‚Ä¢ App downloads and updates\n\nTry asking about a specific app or digital task, and I'll provide step-by-step guidance!",
      "‡§Ø‡§π ‡§è‡§ï ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à! ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•ã ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•å‡§∂‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§î‡§∞ ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Å‡•§ \n\nüí° ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\n‚Ä¢ ‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§ê‡§™, ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨, ‡§´‡•á‡§∏‡§¨‡•Å‡§ï, ‡§ú‡•Ä‡§Æ‡•á‡§≤\n‚Ä¢ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§î‡§∞ UPI\n‚Ä¢ ‡§ó‡•Ç‡§ó‡§≤ ‡§Æ‡•à‡§™‡•ç‡§∏ ‡§î‡§∞ ‡§®‡•á‡§µ‡•Ä‡§ó‡•á‡§∂‡§®\n‚Ä¢ ‡§´‡•ã‡§ü‡•ã ‡§∂‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§¨‡•à‡§ï‡§Ö‡§™\n‚Ä¢ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ\n‚Ä¢ ‡§ê‡§™ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§î‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü\n\n‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ê‡§™ ‡§Ø‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç, ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§ö‡§∞‡§£‡§¨‡§¶‡•ç‡§ß ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ!"
    );
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: messages.length + 1,
      text: inputText,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    const typingMessage: Message = {
      id: messages.length + 2,
      text: getTranslatedText("DLC Agent is thinking...", "DLC ‡§è‡§ú‡•á‡§Ç‡§ü ‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•à..."),
      isUser: false,
      timestamp: new Date(),
      isTyping: true
    };

    setMessages(prev => [...prev, typingMessage]);

    setTimeout(() => {
      setIsTyping(false);
      setMessages(prev => prev.filter(msg => !msg.isTyping));
      
      const responseText = getResponse(inputText);
      const aiResponse: Message = {
        id: messages.length + 3,
        text: responseText,
        isUser: false,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiResponse]);
      
      speak(responseText);
    }, 1500);
  };

  const handleSuggestedQuestion = (question: string) => {
    setInputText(question);
  };

  const toggleVoiceRecognition = () => {
    if (!recognitionRef.current) return;

    if (isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
    } else {
      recognitionRef.current.start();
      setIsListening(true);
    }
  };

  const toggleVoiceOutput = () => {
    setVoiceEnabled(!voiceEnabled);
    if (!voiceEnabled) {
      speak(getTranslatedText("Voice output enabled", "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§∏‡§ï‡•ç‡§∑‡§Æ"));
    } else {
      window.speechSynthesis.cancel();
    }
  };

  const copyMessage = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const rateMessage = (messageId: number, rating: 'up' | 'down') => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, rating } : msg
    ));
  };

  const startNewChat = () => {
    const newSession: ChatSession = {
      id: Date.now().toString(),
      title: getTranslatedText(`Chat ${chatSessions.length + 1}`, `‡§ö‡•à‡§ü ${chatSessions.length + 1}`),
      messages: [...messages],
      timestamp: new Date()
    };
    
    setChatSessions(prev => [newSession, ...prev]);
    setMessages([{
      id: 1,
      text: getTranslatedText(
        "Namaste! I'm DLC Agent, your friendly digital learning assistant. I'm here to help you master digital tools with confidence. How can I assist you today?",
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç DLC ‡§è‡§ú‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§Æ‡§ø‡§§‡•ç‡§∞‡§µ‡§§ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü‡•§ ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?"
      ),
      isUser: false,
      timestamp: new Date()
    }]);
    setCurrentSessionId('default');
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 via-white to-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center px-6 py-3 rounded-full text-sm font-medium mb-6 bg-green-100 text-green-800">
            <Sparkles className="w-4 h-4 mr-2" />
            {getTranslatedText('24/7 AI Assistant', '24/7 AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü')}
          </div>
          
          <h1 className="text-4xl md:text-6xl font-bold mb-6 text-gray-900">
            {getTranslatedText('Chat with', '‡§ö‡•à‡§ü ‡§ï‡§∞‡•á‡§Ç')} <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">DLC Agent</span>
          </h1>
          <p className="text-xl max-w-3xl mx-auto leading-relaxed text-gray-600">
            {getTranslatedText(
              'Your friendly AI assistant for digital learning questions. Ask anything about apps, online safety, or digital tools - I\'m here to help you learn with confidence!',
              '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡§æ ‡§Æ‡§ø‡§§‡•ç‡§∞‡§µ‡§§ AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü‡•§ ‡§ê‡§™‡•ç‡§∏, ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ, ‡§Ø‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç - ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•ã ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Å!'
            )}
          </p>
        </div>

        {/* Main Chat Layout */}
        <div className="grid lg:grid-cols-4 gap-8">
          {/* Quick Questions Sidebar - Left */}
          <div className="lg:col-span-1 order-2 lg:order-1">
            <Card className="shadow-xl border-0 mb-6 bg-white/90 backdrop-blur-sm">
              <CardHeader className="rounded-t-xl bg-gradient-to-r from-yellow-400 to-orange-500 text-white">
                <CardTitle className="flex items-center space-x-2">
                  <Lightbulb className="w-6 h-6" />
                  <span>{getTranslatedText('Quick Questions', '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®')}</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-3 max-h-96 overflow-y-auto">
                {suggestedQuestions.map((question, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    className="w-full text-left h-auto py-4 px-5 justify-start text-wrap overflow-auto  transition-all duration-300 rounded-xl hover:bg-blue-50 hover:border-blue-300"
                    onClick={() => handleSuggestedQuestion(question)}
                  >
                    <MessageCircle className="w-4 h-4 mr-3 flex-shrink-0 text-blue-600" />
                    {question}
                  </Button>
                ))}
              </CardContent>
            </Card>

            {/* Chat History */}
            <Card className="shadow-xl border-0 bg-white/90 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>{getTranslatedText('Chat History', '‡§ö‡•à‡§ü ‡§á‡§§‡§ø‡§π‡§æ‡§∏')}</span>
                  <Button size="sm" onClick={startNewChat}>
                    <RotateCcw className="w-4 h-4 mr-1" />
                    {getTranslatedText('New', '‡§®‡§Ø‡§æ')}
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="max-h-64 overflow-y-auto">
                {chatSessions.map((session) => (
                  <div
                    key={session.id}
                    className="p-3 rounded-lg cursor-pointer mb-2 transition-colors hover:bg-gray-50"
                    onClick={() => {
                      setMessages(session.messages);
                      setCurrentSessionId(session.id);
                    }}
                  >
                    <div className="font-medium text-sm">{session.title}</div>
                    {/* <div className="text-xs text-gray-500">
                      {session.timestamp.toLocaleDateString()}
                    </div> */}
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Chat Interface - Center */}
          <div className="lg:col-span-2 order-1 lg:order-2">
            <Card className="h-[700px] flex flex-col shadow-2xl border-0 bg-white/90 backdrop-blur-sm">
              <CardHeader className="rounded-t-xl bg-gradient-to-r from-blue-600 to-purple-600 text-white">
                <CardTitle className="flex items-center space-x-3">
                  <div className="w-12 h-12 rounded-full flex items-center justify-center bg-white/20">
                    <Bot className="w-7 h-7" />
                  </div>
                  <div>
                    <div className="text-xl font-bold">DLC Agent</div>
                    <div className="text-sm flex items-center text-blue-100">
                      <div className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse"></div>
                      {getTranslatedText('Always here to help', '‡§π‡§Æ‡•á‡§∂‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å')}
                    </div>
                  </div>
                </CardTitle>
              </CardHeader>
              
              {/* Messages */}
              <CardContent className="flex-1 overflow-y-auto p-6 space-y-6 bg-gray-50">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[85%] p-5 ${message.isTyping ? 'animate-pulse' : ''} ${
                        message.isUser
                          ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-3xl rounded-bl-3xl'
                          : 'bg-white text-gray-900 rounded-t-3xl rounded-br-3xl shadow-lg border'
                      }`}
                    >
                      <div className="flex items-start space-x-3">
                        {!message.isUser && (
                          <div className="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 mt-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
                            <Bot className="w-4 h-4" />
                          </div>
                        )}
                        {message.isUser && (
                          <div className="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 mt-1 bg-white/20">
                            <User className="w-4 h-4" />
                          </div>
                        )}
                        <div className="flex-1">
                          <p className={`leading-relaxed whitespace-pre-line ${
                            message.isUser 
                              ? 'text-white'
                              : 'text-gray-800'
                          }`}>
                            {message.text}
                          </p>
                          <div className="flex items-center justify-between mt-3">
                            {/* <p className={`text-xs flex items-center ${
                              message.isUser 
                                ? 'text-blue-100'
                                : 'text-gray-500'
                            }`}>
                              <Clock className="w-3 h-3 mr-1" />
                              {message.timestamp.toLocaleTimeString()}
                            </p> */}
                            
                            {!message.isUser && !message.isTyping && (
                              <div className="flex items-center space-x-2">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => copyMessage(message.text)}
                                  className="h-6 w-6 p-0"
                                >
                                  <Copy className="w-3 h-3" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => rateMessage(message.id, 'up')}
                                  className={`h-6 w-6 p-0 ${message.rating === 'up' ? 'text-green-600' : ''}`}
                                >
                                  <ThumbsUp className="w-3 h-3" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => rateMessage(message.id, 'down')}
                                  className={`h-6 w-6 p-0 ${message.rating === 'down' ? 'text-red-600' : ''}`}
                                >
                                  <ThumbsDown className="w-3 h-3" />
                                </Button>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </CardContent>

              {/* Input */}
              <div className="p-6 border-t bg-white border-gray-200">
                <div className="flex space-x-4">
                  <Input
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                    placeholder={getTranslatedText(
                      "Ask me anything about digital tools...",
                      "‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç..."
                    )}
                    className="flex-1 text-lg h-14 border-2 rounded-2xl px-6 border-gray-200 focus:border-blue-500"
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    disabled={isTyping}
                  />
                  <Button 
                    onClick={handleSendMessage}
                    className="px-8 h-14 rounded-2xl bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800"
                    disabled={!inputText.trim() || isTyping}
                  >
                    <Send className="w-5 h-5" />
                  </Button>
                </div>
              </div>
            </Card>
          </div>

          {/* Voice Controls - Right */}
          <div className="lg:col-span-1 order-3">
            <Card className="shadow-xl border-0 mb-6 bg-white/90 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-lg">
                  {getTranslatedText('Voice Controls', '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£')}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button
                  variant={voiceEnabled ? 'default' : 'outline'}
                  onClick={toggleVoiceOutput}
                  className="w-full"
                >
                  {voiceEnabled ? <Volume2 className="w-4 h-4 mr-2" /> : <VolumeX className="w-4 h-4 mr-2" />}
                  {voiceEnabled 
                    ? getTranslatedText('Voice On', '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡§æ‡§≤‡•Ç') 
                    : getTranslatedText('Voice Off', '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡§Ç‡§¶')
                  }
                </Button>
                
                <Button
                  variant={isListening ? 'destructive' : 'outline'}
                  onClick={toggleVoiceRecognition}
                  className="w-full"
                  disabled={!recognitionRef.current}
                >
                  {isListening ? <MicOff className="w-4 h-4 mr-2" /> : <Mic className="w-4 h-4 mr-2" />}
                  {isListening 
                    ? getTranslatedText('Stop Listening', '‡§∏‡•Å‡§®‡§®‡§æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç') 
                    : getTranslatedText('Voice Input', '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§á‡§®‡§™‡•Å‡§ü')
                  }
                </Button>
              </CardContent>
            </Card>
          </div>
          
        </div>

        {/* Chat Tips and Safety - Below Chat */}
        <div className="grid md:grid-cols-2 gap-8 mt-12">
          {/* Chat Tips */}
          <Card className="shadow-xl border-0 bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
            <CardHeader>
              <CardTitle className="flex items-center text-green-800">
                <Sparkles className="w-5 h-5 mr-2" />
                üí° {getTranslatedText('Chat Tips', '‡§ö‡•à‡§ü ‡§ü‡§ø‡§™‡•ç‡§∏')}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-green-700">
              <div className="flex items-start space-x-2">
                <div className="w-2 h-2 rounded-full mt-2 flex-shrink-0 bg-green-500"></div>
                <p>{getTranslatedText(
                  'Ask specific questions about apps and tools',
                  '‡§ê‡§™‡•ç‡§∏ ‡§î‡§∞ ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç'
                )}</p>
              </div>
              <div className="flex items-start space-x-2">
                <div className="w-2 h-2 rounded-full mt-2 flex-shrink-0 bg-green-500"></div>
                <p>{getTranslatedText(
                  'Mention the device you\'re using (phone/computer)',
                  '‡§Ö‡§™‡§®‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§è ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ï‡§æ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§ï‡§∞‡•á‡§Ç (‡§´‡•ã‡§®/‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞)'
                )}</p>
              </div>
              <div className="flex items-start space-x-2">
                <div className="w-2 h-2 rounded-full mt-2 flex-shrink-0 bg-green-500"></div>
                <p>{getTranslatedText(
                  'Use voice input for hands-free interaction',
                  '‡§π‡•à‡§Ç‡§°‡•ç‡§∏-‡§´‡•ç‡§∞‡•Ä ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç'
                )}</p>
              </div>
              <div className="flex items-start space-x-2">
                <div className="w-2 h-2 rounded-full mt-2 flex-shrink-0 bg-green-500"></div>
                <p>{getTranslatedText(
                  'Rate responses to help me improve',
                  '‡§Æ‡•Å‡§ù‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç'
                )}</p>
              </div>
            </CardContent>
          </Card>

          {/* Safety Reminder */}
          <Card className="shadow-xl border-0 bg-gradient-to-br from-red-50 to-pink-50 border-red-200">
            <CardHeader>
              <CardTitle className="text-red-800">
                üõ°Ô∏è {getTranslatedText('Safety First', '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§™‡§π‡§≤‡•á')}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-red-700">
              <p className="font-medium">
                {getTranslatedText('Remember:', '‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç:')}
              </p>
              <p>‚Ä¢ {getTranslatedText(
                'Never share personal information online',
                '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§∏‡§æ‡§ù‡§æ ‡§® ‡§ï‡§∞‡•á‡§Ç'
              )}</p>
              <p>‚Ä¢ {getTranslatedText(
                'Be cautious with unknown links or messages',
                '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§≤‡§ø‡§Ç‡§ï ‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§æ‡§µ‡§ß‡§æ‡§® ‡§∞‡§π‡•á‡§Ç'
              )}</p>
              <p>‚Ä¢ {getTranslatedText(
                'Always verify before making payments',
                '‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç'
              )}</p>
              <p>‚Ä¢ {getTranslatedText(
                'Ask family if you\'re unsure about something',
                '‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§¨‡§æ‡§§ ‡§ï‡•ã ‡§≤‡•á‡§ï‡§∞ ‡§Ö‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§π‡•à‡§Ç ‡§§‡•ã ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§∏‡•á ‡§™‡•Ç‡§õ‡•á‡§Ç'
              )}</p>
              <p>‚Ä¢ {getTranslatedText(
                'Report suspicious activities to 1930',
                '‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü 1930 ‡§™‡§∞ ‡§ï‡§∞‡•á‡§Ç'
              )}</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}